version: "3.4"

services:
  iota_dev_wasp:
    build:
      context: .
      dockerfile: ./docker/wasp/Dockerfile
    container_name: iota_dev_wasp
    environment:
      - WASP_CLI_WASP_API_ADDRESS=iota_dev_wasp:9090
      - WASP_CLI_WASP_NANOMSG_ADDRESS=127.0.0.1:5550
      - WASP_CLI_WASP_PEERING_ADDRESS=127.0.0.1:4000
      - WASP_CLI_GOSHIMER_API_ADDRESS=iota_dev_goshimmer:8080
      - WASP_CLI_FAUCET_POW_TARGET=-1
      - USE_EVM=${USE_EVM}
      - EVM_CHAIN_NAME=${EVM_FLAVOUR}
      - EVM_CHAIN_DESCRIPTION=EVM-CHAIN
      - EVM_CHAIN_TOKEN_DEPOSIT=10000
      - EVM_CHAIN_ALLOC_ADDRESS=${METAMASK_ADRESS:?-}
      - EVM_CHAIN_ALLOC_TOKENS=1000000000000000000000000
      - EVM_CHAIN_ID=${EVM_CHAIN_ID:?-}
      - EVM_FLAVOUR=${EVM_FLAVOUR:?-}
      - EVM_START_JSONRPC=${START_JSONRPC}
    networks:
      - traefik-v2-proxy
      - default
    volumes:
      - wasp:/wasp
      - ./src:/src
      - ./deps:/deps
      - ./data/wasp/wasp.config.json:/etc/wasp_config.json
    expose:
      - "4000/udp" # Peering
      - "5550/tcp" # Nano MSG
      #- "7000/tcp" # Wasp Dashboard
      #- "9090/tcp" # Wasp WebAPI
    ports:
      - "4000:4000/tcp" # Peering
      - "5550:5550/tcp" # Nano MSG
      #- "7000:7000/tcp" # Wasp Dashboard
      #- "9090:9090/tcp" # Wasp WebAPI
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-v2-proxy
      # Services
      - traefik.http.services.wasp-dashboard.loadbalancer.server.port=7000
      - traefik.http.services.wasp-webapi.loadbalancer.server.port=9090
      # Routers
      # Dashboard
      - traefik.http.routers.wasp-dashboard.service=wasp-dashboard
      - traefik.http.routers.wasp-dashboard.rule=Host(`${WASP_DASHBOARD_HOSTNAME:?-}`)
      - traefik.http.routers.wasp-dashboard.middlewares=app_redirect
      - traefik.http.routers.wasp-dashboard.entrypoints=websecure
      - traefik.http.routers.wasp-dashboard.tls.certresolver=letsencrypt
      #WebApi
      - traefik.http.routers.wasp-webapi.service=wasp-webapi
      - traefik.http.routers.wasp-webapi.rule=Host(`${WASP_API_HOSTNAME:?-}`)
      - traefik.http.routers.wasp-webapi.middlewares=app_redirect
      - traefik.http.routers.wasp-webapi.entrypoints=websecure
      - traefik.http.routers.wasp-webapi.tls.certresolver=letsencrypt

      # Middlewares
      - traefik.http.middlewares.app_redirect.redirectregex.permanent=true


  iota_dev_goshimmer:
    restart: always
    container_name: iota_dev_goshimmer
    networks:
      - traefik-v2-proxy
      - default
    image: lukasmoe/goshimmer:wasp-testnet-additions
    stop_grace_period: 1m
    command: >
      --config=/tmp/config.json
      --database.directory=/tmp/devnetdb
      --mana.snapshotResetTime=true
      --node.seed=base64:B6X+8atnQMtab7K9zbiBL9NzPe8SMzsmLFzpSvKrl6I=
      --messageLayer.snapshot.file=/tmp/snapshot.bin
      --messageLayer.snapshot.genesisNode=
      --messageLayer.startSynced=true
    volumes:
      - goshimmer-db:/tmp/devnetdb
      - ./data/goshimmer/goshimmer.config.json:/tmp/config.json:ro
      - ./data/goshimmer/snapshot.bin:/tmp/snapshot.bin:ro
    ports:
      - "5000:5000/tcp" # TX Stream
      #- "8080:8080/tcp" # GoShimmer API
      #- "8081:8081/tcp" # GoShimmer Dashboard
      - "9000:9000/tcp" # Analysis Dashboard
      #- "9312:9312/tcp" # Prometheus
    expose:
      - "1888/tcp" # Analysis Server (within Docker network)
      - "5000/tcp" # TXStream
      #- "8080/tcp" # GoShimmer API
      #- "8081/tcp" # GoShimmer Dashboard
      - "9000/tcp" # Analysis Dashboard
      #- "9312/tcp" # Prometheus
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-v2-proxy
      # Services
      - traefik.http.services.goshimmer-dashboard.loadbalancer.server.port=8081
      - traefik.http.services.goshimmer-webapi.loadbalancer.server.port=8080
      # Routers
      - traefik.http.routers.goshimmer-dashboard.service=goshimmer-dashboard
      - traefik.http.routers.goshimmer-dashboard.rule=Host(`${GOSHIMMER_DASHBOARD_HOSTNAME:?-}`)
      - traefik.http.routers.goshimmer-dashboard.middlewares=app_redirect
      - traefik.http.routers.goshimmer-dashboard.entrypoints=websecure
      - traefik.http.routers.goshimmer-dashboard.tls.certresolver=letsencrypt
      - traefik.http.routers.goshimmer-webapi.service=goshimmer-webapi
      - traefik.http.routers.goshimmer-webapi.rule=Host(`${GOSHIMMER_API_HOSTNAME:?-}`)
      - traefik.http.routers.goshimmer-webapi.middlewares=app_redirect
      - traefik.http.routers.goshimmer-webapi.entrypoints=websecure
      - traefik.http.routers.goshimmer-webapi.tls.certresolver=letsencrypt
      # Middlewares
      - traefik.http.middlewares.app_redirect.redirectregex.permanent=true

volumes:
  goshimmer-db:
    name: goshimmer-db
  wasp:
    name: wasp

networks:
  traefik-v2-proxy: 
    external: true